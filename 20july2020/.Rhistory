tmp_1$time=(tmp_1$time) / (max(abs(tmp_1$time)))
tmp_2$time=(tmp_2$time) / (max(abs(tmp_2$time)))
tmp=rbind(tmp_1,tmp_2)
df_tmp=rbind(df_tmp,tmp)
}
ggplot(df_tmp, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df_new = data.frame(matrix(nrow=40))
for(i in 1:32){
xx=seq(-1,1,length.out=40)
tmp=subset(df_tmp, node==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:33]
oldnames = colnames(df_new)
newnames = colnames(data_mat)
for(i in 1:32) names(df_new)[names(df_new) == oldnames[i]] = newnames[i]
fPCA_subset <- function(time_subset, data_mat, node_subset, k, nharm){
basis <- create.fourier.basis(c(time_subset[1],time_subset[length(time_subset)]), k)
smoothfd <- smooth.basis(time_subset, data_mat[time_subset,node_subset], basis)$fd
plot(smoothfd)
title(main="smoothed curves")
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
plot.pca.fd(rotpcalist)
return(rotpcalist)
}
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(time_subset=c(1:40), df_new, node_subset = c(1:32)
, k=32, nharm=2)
data_mat <- as.matrix(data_15may2020)
f_fourier_smooth <- function(time_subset, data_mat, node_subset, k){
basis <- create.fourier.basis(c(time_subset[1],time_subset[length(time_subset)]), k)
fd_obj <- smooth.basis(time_subset, data_mat[time_subset,node_subset], basis)
smoothfd <- fd_obj$fd
#plot(smoothfd)
#title(main=paste("Fourier Basis Smoothing of node:", node_subset, ", Basis_number:",k ))
return(fd_obj)
}
transform.Cycle = function(data, register){
# obtain index at which curve crosses 0
#crossed 0---> -1: pos to neg,    1: neg to pos
#returns: location index where curve crosses X-axis
x=diff(ifelse(data>0,1,0))
z_idx=(1:599)[x!=0]
# skip first crossing if it is from positive to negative
if (x[z_idx[1]]==-1){
z_idx=z_idx[-1]
}
#put every complete cycle in a Dataframe
i=1
cl=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i+2<=length(z_idx)){
if(register==0){
tmp=data.frame(cycle=cl, time=seq(z_idx[i],z_idx[i+2]), y_value=smoothed_curve[z_idx[i]:z_idx[i+2]])
}
else{
tmp=data.frame(cycle=cl, time=seq(1,length(seq(z_idx[i],z_idx[i+2]))), y_value=smoothed_curve[z_idx[i]:z_idx[i+2]])
tmp[,2]=tmp[,2]-length(seq(z_idx[i],z_idx[i+1]))-1
}
result=rbind(result,tmp)
i=i+2
cl=cl+1
}
return(result)
}
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
library(zoo)
library(fda.usc)
library(fda.usc)
library(dplyr)
library(reshape)
library(reshape2)
library(reshape)
library(reshape2)
library(pracma)
library(ggplot2)
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df_tmp = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
tmp=subset(df, node==i)
tmp_1=subset(tmp, time<=0)
tmp_2=subset(tmp, time>0)
tmp_1$time=(tmp_1$time) / (max(abs(tmp_1$time)))
tmp_2$time=(tmp_2$time) / (max(abs(tmp_2$time)))
tmp=rbind(tmp_1,tmp_2)
df_tmp=rbind(df_tmp,tmp)
}
ggplot(df_tmp, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
View(df)
df_tmp = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
tmp=subset(df, node==i)
tmp$time=(tmp$time) / (max(abs(tmp$time)))
df_tmp=rbind(df_tmp,tmp)
}
View(df_tmp)
ggplot(df_tmp, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=0)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df_tmp = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
tmp=subset(df, node==i)
tmp$time=(tmp$time) / (max(abs(tmp$time)))
df_tmp=rbind(df_tmp,tmp)
}
View(df_tmp)
ggplot(df_tmp, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
View(df)
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
transform.Cycle = function(data, register){
# obtain index at which curve crosses 0
#crossed 0---> -1: pos to neg,    1: neg to pos
#returns: location index where curve crosses X-axis
x=diff(ifelse(data>0,1,0))
z_idx=(1:599)[x!=0]
# skip first crossing if it is from positive to negative
if (x[z_idx[1]]==-1){
z_idx=z_idx[-1]
}
#put every complete cycle in a Dataframe
i=1
cl=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i+2<=length(z_idx)){
if(register==0){
tmp=data.frame(cycle=cl, time=seq(z_idx[i],z_idx[i+2]),
y_value=smoothed_curve[z_idx[i]:z_idx[i+2]])
}
else{
tmp=data.frame(cycle=cl, time=seq(1,length(seq(z_idx[i],z_idx[i+2]))),
y_value=smoothed_curve[z_idx[i]:z_idx[i+2]])
# align at 0
#tmp[,2]=tmp[,2]-length(seq(z_idx[i],z_idx[i+1]))-1
}
result=rbind(result,tmp)
i=i+2
cl=cl+1
}
return(result)
}
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df_tmp = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
tmp=subset(df, node==i)
tmp$time=(tmp$time) / (max(abs(tmp$time)))
df_tmp=rbind(df_tmp,tmp)
}
View(df_tmp)
ggplot(df_tmp, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
ggplot(df_tmp, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df_tmp = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
tmp=subset(df, node==i)
tmp$time=scale(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
ggplot(df_tmp, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
fPCA_subset <- function(time_subset, data_mat, node_subset, k, nharm){
basis <- create.fourier.basis(c(time_subset[1],time_subset[length(time_subset)]), k)
smoothfd <- smooth.basis(time_subset, data_mat[time_subset,node_subset], basis)$fd
plot(smoothfd)
title(main="smoothed curves")
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
plot.pca.fd(rotpcalist)
return(rotpcalist)
}
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(time_subset=c(1:40), df_new, node_subset = c(1:32)
, k=32, nharm=2)
df_new = data.frame(matrix(nrow=40))
for(i in 1:32){
xx=seq(-1,1,length.out=40)
tmp=subset(df_tmp, node==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:33]
oldnames = colnames(df_new)
newnames = colnames(data_mat)
for(i in 1:32) names(df_new)[names(df_new) == oldnames[i]] = newnames[i]
View(df)
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
View(transformed_node)
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
View(transformed_node)
View(transformed_node)
# scale
df_tmp = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
unique(transformed_node$cycle)
# scale
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=scale(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
ggplot(df_tmp, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
ggplot(df_tmp, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
ggplot(transformed_node, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
ggplot(df_tmp, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
View(df_tmp)
help(scale)
transformed_node$time
# scale
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
ggplot(df_tmp, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
# Pivot
df_new = data.frame(matrix(nrow=40))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=40)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
View(df_new)
unique(df_tmp$cycle)
df_new=df_new[,2:unique(df_tmp$cycle)+1]
df_new=df_new[,2:length(unique(df_tmp$cycle))+1]
df_new=df_new[,2:length(unique(df_new$cycle))+1]
2:length(unique(df_new$cycle))+1
length(unique(df_new$cycle))+1
# Pivot
df_new = data.frame(matrix(nrow=40))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=40)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:length(unique(df_new$cycle))+1]
View(df_new)
# Pivot
df_new = data.frame(matrix(nrow=40))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=40)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
View(df_new)
length(unique(df_tmp$cycle)
)
length(unique(df_new$cycle))+1
View(df_new)
df_new=df_new[,2:length(unique(df_tmp$cycle))+1]
View(df_new)
# Pivot
df_new = data.frame(matrix(nrow=40))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=40)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
View(df_new)
2:length(unique(df_tmp$cycle))+1
2:(length(unique(df_tmp$cycle))+1)
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
View(df_new)
oldnames = colnames(df_new)
oldnames = colnames(df_new)
oldnames
newnames = colnames(data_mat)
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
View(df_new)
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(2), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
ggplot(transformed_node, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
# scale
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
ggplot(df_tmp, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
# Pivot
df_new = data.frame(matrix(nrow=40))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=40)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(3), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
ggplot(transformed_node, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
# scale
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
ggplot(df_tmp, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
# Pivot
df_new = data.frame(matrix(nrow=40))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=40)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(4), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
ggplot(transformed_node, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
# scale
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
ggplot(df_tmp, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
# Pivot
df_new = data.frame(matrix(nrow=40))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=40)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
library(zoo)
library(fda.usc)
library(dplyr)
library(reshape)
library(reshape2)
library(pracma)
library(ggplot2)
#data_15may2020 <- read.csv("C:/Users/Han Wang/Desktop/BioRankings/data_15may2020.csv", header=TRUE)
data_15may2020 <- read.csv("/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/data_15may2020.csv", header=TRUE)
z <- read.zoo(data_15may2020)
data_15may2020 <- select(data_15may2020, -c(X))
data_mat <- as.matrix(data_15may2020)
fPCA_subset <- function(data_mat, k, nharm){
basis <- create.fourier.basis(c(time_subset[1],time_subset[length(time_subset)]), k)
smoothfd <- smooth.basis(time_subset, data_mat, basis)$fd
#plot(smoothfd)
#title(main="smoothed curves")
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
plot.pca.fd(rotpcalist)
return(rotpcalist)
}
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=3, nharm=2)
length(df_new)
shape(df_new)
View(df_new)
nrow(df_new)
View(df_new)
fPCA_subset <- function(data_mat, k, nharm){
basis <- create.fourier.basis(c(1,nrow(data_mat)), k)
smoothfd <- smooth.basis(1:nrow(data_mat), data_mat, basis)$fd
#plot(smoothfd)
#title(main="smoothed curves")
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
plot.pca.fd(rotpcalist)
return(rotpcalist)
}
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=3, nharm=2)
plot(smoothfd)
fPCA_subset <- function(data_mat, k, nharm){
basis <- create.fourier.basis(c(1,nrow(data_mat)), k)
smoothfd <- smooth.basis(1:nrow(data_mat), data_mat, basis)$fd
plot(smoothfd)
title(main="smoothed curves")
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
plot.pca.fd(rotpcalist)
return(rotpcalist)
}
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=3, nharm=2)
ggplot(df_tmp, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
rotpcalist = fPCA_subset(df_new, k=3, nharm=2)
ggplot(df_tmp, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
###
basis <- create.fourier.basis(c(1,nrow(df_new)), k)
###
basis <- create.fourier.basis(c(1,nrow(df_new)), 3)
smoothfd <- smooth.basis(1:nrow(df_new), df_new, basis)$fd
plot(smoothfd)
par(mfrow=c(1,1))
plot(smoothfd)
ggplot(df_tmp, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
plot(smoothfd)
plot(smoothfd)
###
basis <- create.fourier.basis(c(1,nrow(df_new)), 10)
smoothfd <- smooth.basis(1:nrow(df_new), df_new, basis)$fd
par(mfrow=c(1,1))
plot(smoothfd)
###
basis <- create.fourier.basis(c(1,nrow(df_new)), 11)
smoothfd <- smooth.basis(1:nrow(df_new), df_new, basis)$fd
par(mfrow=c(1,1))
plot(smoothfd)
ggplot(df_tmp, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
###
basis <- create.fourier.basis(c(1,nrow(df_new)), 11)
smoothfd <- smooth.basis(1:nrow(df_new), df_new, basis)$fd
par(mfrow=c(1,1))
plot(smoothfd)
ggplot(df_tmp, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
rotpcalist = fPCA_subset(df_new, k=11, nharm=2)
fPCA_subset <- function(data_mat, k, nharm){
basis <- create.fourier.basis(c(1,nrow(data_mat)), k)
smoothfd <- smooth.basis(1:nrow(data_mat), data_mat, basis)$fd
#plot(smoothfd)
ggplot(smoothfd, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
title(main="smoothed curves")
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
plot.pca.fd(rotpcalist)
return(rotpcalist)
}
rotpcalist = fPCA_subset(df_new, k=11, nharm=2)
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=11, nharm=2)
fPCA_subset <- function(data_mat, k, nharm){
basis <- create.fourier.basis(c(1,nrow(data_mat)), k)
smoothfd <- smooth.basis(1:nrow(data_mat), data_mat, basis)$fd
plot(smoothfd)
title(main="smoothed curves")
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
plot.pca.fd(rotpcalist)
return(rotpcalist)
}
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=11, nharm=2)
ggplot(df_tmp, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
