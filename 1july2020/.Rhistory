smoothed_curve = eval.fd(c(1:600),result_obj$fd)
plot.periodicCycle(data=smoothed_curve, register=0)
result
View(result)
result$time
scale(result$time)
### function
plot.periodicCycle = function(data, original){
x=diff(ifelse(data>0,1,0))       #crossed 0---> -1: pos to neg,    1: neg to pos
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
N=idivide(length(z_idx),3)
i=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i<=N){
if(original==1){
tmp=data.frame(cycle=i, time=scale(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=scale(seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])))), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
ggplot(result, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
}
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=50)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
plot.periodicCycle(data=smoothed_curve, original=1)
### function
plot.periodicCycle = function(data, original){
x=diff(ifelse(data>0,1,0))       #crossed 0---> -1: pos to neg,    1: neg to pos
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
N=idivide(length(z_idx),3)
i=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i<=N){
if(original==1){
tmp=data.frame(cycle=i, time=seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=scale(seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])))), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
ggplot(result, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
}
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=50)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
plot.periodicCycle(data=smoothed_curve, original=1)
plot.periodicCycle(data=smoothed_curve, original=0)
### function
plot.periodicCycle = function(data, original){
x=diff(ifelse(data>0,1,0))       #crossed 0---> -1: pos to neg,    1: neg to pos
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
N=idivide(length(z_idx),3)
i=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i<=N){
if(original==1){
tmp=data.frame(cycle=i, time=scale(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=scale(seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])))), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
ggplot(result, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
}
plot.periodicCycle(data=smoothed_curve, original=0)
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=50)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
par(mfrow=c(1,2))
plot.periodicCycle(data=smoothed_curve, original=0)
plot.periodicCycle(data=smoothed_curve, original=1)
par(mfrow=c(1,2))
plot.periodicCycle(data=smoothed_curve, original=0)
plot.periodicCycle(data=smoothed_curve, original=1)
par(mfrow=c(2,2))
plot.periodicCycle(data=smoothed_curve, original=0)
plot.periodicCycle(data=smoothed_curve, original=1)
### function
plot.periodicCycle = function(data, original){
x=diff(ifelse(data>0,1,0))       #crossed 0---> -1: pos to neg,    1: neg to pos
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
N=idivide(length(z_idx),3)
i=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i<=N){
if(original==1){
tmp=data.frame(cycle=i, time=seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]))), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
ggplot(result, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
}
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=50)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
par(mfrow=c(2,2))
plot.periodicCycle(data=smoothed_curve, original=0)
plot.periodicCycle(data=smoothed_curve, original=1)
plot.periodicCycle(data=smoothed_curve, original=0)
### function
plot.periodicCycle = function(data, register){
x=diff(ifelse(data>0,1,0))       #crossed 0---> -1: pos to neg,    1: neg to pos
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
N=idivide(length(z_idx),3)
i=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i<=N){
if(register==1){
tmp=data.frame(cycle=i, time=seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]))), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
ggplot(result, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
}
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=50)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
plot.periodicCycle(data=smoothed_curve, register=0)
### function
plot.periodicCycle = function(data, register){
x=diff(ifelse(data>0,1,0))       #crossed 0---> -1: pos to neg,    1: neg to pos
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
N=idivide(length(z_idx),3)
i=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i<=N){
if (standardized==0){
if(register==1){
tmp=data.frame(cycle=i, time=seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]))), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
else{
if(register==1){
tmp=data.frame(cycle=i, time=scale(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=scale(seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])))), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
}
ggplot(result, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
}
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=50)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
plot.periodicCycle(data=smoothed_curve, register=0)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=0)
### function
plot.periodicCycle = function(data, register, standardized){
x=diff(ifelse(data>0,1,0))       #crossed 0---> -1: pos to neg,    1: neg to pos
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
N=idivide(length(z_idx),3)
i=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i<=N){
if (standardized==0){
if(register==1){
tmp=data.frame(cycle=i, time=seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]))), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
else{
if(register==1){
tmp=data.frame(cycle=i, time=scale(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=scale(seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])))), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
}
ggplot(result, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
}
plot.periodicCycle(data=smoothed_curve, register=0, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
# UnderSmoothed
selection_result=fourier_selection(time_subset=c(1:600), data_mat, node_subset=c(1), kList=c(3:303))
result_obj <- f_fourier_smooth(time_subset=c(1:600),data_mat,node_subset=c(1)
,k=selection_result[which.min(selection_result[,2]),1])
plot.periodicCycle(data=smoothed_curve, register=1, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
### function
plot.periodicCycle = function(data, register, standardized){
x=diff(ifelse(data>0,1,0))       #crossed 0---> -1: pos to neg,    1: neg to pos
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
N=idivide(length(z_idx),3)
i=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i<=N){
if (standardized==0){
if(register==0){
tmp=data.frame(cycle=i, time=seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]))), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
else{
if(register==0){
tmp=data.frame(cycle=i, time=scale(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=scale(seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])))), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
}
ggplot(result, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
}
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", tidt=TRUE, warning = FALSE)
library(zoo)
library(fda.usc)
library(dplyr)
library(reshape)
library(pracma)
library(ggplot2)
#data_15may2020 <- read.csv("C:/Users/Han Wang/Desktop/BioRankings/data_15may2020.csv", header=TRUE)
data_15may2020 <- read.csv("/Users/hanwang/desktop/git_user/Functional_Data_Analysis/data_15may2020.csv", header=TRUE)
z <- read.zoo(data_15may2020)
data_15may2020 <- select(data_15may2020, -c(X))
data_mat <- as.matrix(data_15may2020)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=0)
title("registered at 0")
plot.periodicCycle(data=smoothed_curve, register=1, standardized=0)
title("registered at 0")
plot.periodicCycle = function(data, register, standardized){
x=diff(ifelse(data>0,1,0))       #crossed 0---> -1: pos to neg,    1: neg to pos
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
N=idivide(length(z_idx),3)
i=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i<=N){
if (standardized==0){
if(register==0){
tmp=data.frame(cycle=i, time=seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]))),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
else{
if(register==0){
tmp=data.frame(cycle=i, time=scale(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=scale(seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])))),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
}
ggplot(result, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
title("registered at 0")
}
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
plot.periodicCycle = function(data, register, standardized){
x=diff(ifelse(data>0,1,0))       #crossed 0---> -1: pos to neg,    1: neg to pos
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
N=idivide(length(z_idx),3)
i=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i<=N){
if (standardized==0){
if(register==0){
tmp=data.frame(cycle=i, time=seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]))),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
else{
if(register==0){
tmp=data.frame(cycle=i, time=scale(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=scale(seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])))),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
}
ggplot(result, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
+ ggtitle("registered at 0")
}
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle = function(data, register, standardized){
x=diff(ifelse(data>0,1,0))       #crossed 0---> -1: pos to neg,    1: neg to pos
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
N=idivide(length(z_idx),3)
i=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i<=N){
if (standardized==0){
if(register==0){
tmp=data.frame(cycle=i, time=seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]))),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
else{
if(register==0){
tmp=data.frame(cycle=i, time=scale(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=scale(seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])))),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
}
ggplot(result, aes(time, y_value,group=cycle, colour=cycle), title("registered at 0")) + geom_line() + theme(legend.position="top")
}
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle = function(data, register, standardized){
x=diff(ifelse(data>0,1,0))       #crossed 0---> -1: pos to neg,    1: neg to pos
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
N=idivide(length(z_idx),3)
i=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i<=N){
if (standardized==0){
if(register==0){
tmp=data.frame(cycle=i, time=seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]))),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
else{
if(register==0){
tmp=data.frame(cycle=i, time=scale(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=scale(seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3])))),
y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
result=rbind(result,tmp)
i=i+1
}
}
ggplot(result, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
}
plot.periodicCycle(data=smoothed_curve, register=1, standardized=0)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
# OverSmoothed, k=32
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=1)
plot.periodicCycle(data=smoothed_curve, register=1, standardized=0)
z_idx
x[10]
x[11]
data()
data()
data
View(data_mat)
x
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=50)
library(zoo)
library(fda.usc)
library(dplyr)
library(reshape)
library(xlsx)
library(ggplot2)
data_15may2020 <- read.csv("/Users/hanwang/desktop/git_user/Functional_Data_Analysis/data_15may2020.csv", header=TRUE)
data_15may2020 <- read.csv("/Users/hanwang/desktop/git_user/Functional_Data_Analysis/data_15may2020.csv", header=TRUE)
library(ggplot2)
data_15may2020 <- read.csv("/Users/hanwang/desktop/git_user/Functional_Data_Analysis/data_15may2020.csv", header=TRUE)
data_15may2020 <- read.csv("/Users/hanwang/desktop/git_user/Functional_Data_Analysis/data_15may2020.csv", header=TRUE)
View(data_mat)
#data_15may2020 <- read.csv("C:/Users/Han Wang/Desktop/Git_desktop/Functional_Data_Analysis/data_15may2020.csv", header=TRUE)
z <- read.zoo(data_15may2020)
data_15may2020 <- select(data_15may2020, -c(X))
#####2. same function used from last time
fPCA_subset <- function(time_subset, data_mat, node_subset, k, nharm){
basis <- create.fourier.basis(c(time_subset[1],time_subset[length(time_subset)]), k)
smoothfd <- smooth.basis(time_subset, data_mat[time_subset,node_subset], basis)$fd
plot(smoothfd)
title(main="smoothed curves")
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
plot.pca.fd(rotpcalist)
return(rotpcalist)
}
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=50)
plot.periodicCycle(data=smoothed_curve, register=0, standardized=1)
#
#if ( and z_idx[]){
#  }
#
N=divide(length(z_idx),3)
#
#if ( and z_idx[]){
#  }
#
N=ndivide(length(z_idx),3)
#
#if ( and z_idx[]){
#  }
#
N=individe(length(z_idx),3)
z_idx=(1:599)[x!=0]             #returns: location index where curve crosses X-axis
if(register==0){
tmp=data.frame(cycle=i, time=seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
else{
tmp=data.frame(cycle=i, time=seq(1,length(seq(z_idx[1+(i-1)*3],z_idx[3+(i-1)*3]))), y_value=smoothed_curve[z_idx[1+(i-1)*3]:z_idx[3+(i-1)*3]])
}
library(zoo)
library(fda.usc)
library(dplyr)
library(reshape)
library(xlsx)
library(ggplot2)
#####1. import data
data_15may2020 <- read.csv("/Users/hanwang/desktop/git_user/Functional_Data_Analysis/data_15may2020.csv", header=TRUE)
library(zoo)
library(fda.usc)
library(dplyr)
library(reshape)
library(xlsx)
library(ggplot2)
data_15may2020 <- read.csv("/Users/hanwang/desktop/git_user/Functional_Data_Analysis/data_15may2020.csv", header=TRUE)
