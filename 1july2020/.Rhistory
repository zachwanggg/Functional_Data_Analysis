transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
for(i in 1:32)){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32)){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
for(i in 1:10){print(i)}
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
View(df)
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
View(df)
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(2), k=32)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(3), k=32)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df
View(df)
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(3), k=32)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==3)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
View(df)
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==2)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==3)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==2)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
View(node1)
View(df)
transformed_node = transform.Cycle(smoothed_curve, register=0)
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=0)
tmp = subset(transformed_node, cycle==2)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
transformed_node = transform.Cycle(smoothed_curve, register=1)
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==2)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
class(y_value)
View(df)
View(data_mat)
f_fourier_smooth <- function(time_subset, data_mat, node_subset, k){
basis <- create.fourier.basis(c(time_subset[1],time_subset[length(time_subset)]), k)
fd_obj <- smooth.basis(time_subset, data_mat[time_subset,node_subset], basis)
smoothfd <- fd_obj$fd
plot(smoothfd)
title(main=paste("Fourier Basis Smoothing of node:", node_subset, ", Basis_number:",k ))
return(fd_obj)
}
f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=32)
eval.fd(c(1:600),result_obj$fd)
transform.Cycle(smoothed_curve, register=1)
View(df)
class(result_obj)
class(result_obj$fd)
plot(result_obj$fd)
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=32)
plot(result_obj$fd)
View(result_obj)
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==3)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
tmp = subset(transformed_node, cycle==2)
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==2)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==4)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==5)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
register.fd((result_obj))
register.fd(yfd=result_obj)
register.fd(yfd=result_obj$fd)
register.fd(yfd=result_obj$fd)
result_obj$fd
View(df)
class(result_obj$fd)
result_obj$fd
View(result_obj)
View(result_obj$fd)
### fPCA
result_obj <- f_fourier_smooth(time_subset=c(1:600), df, node_subset=c(1:32), k=32)
df
View(df)
smooth.spline(speed, dist, df = 6.4)
result_obj <- f_fourier_smooth(time_subset=c(1:600), df, node_subset=c(1:32), k=32)
result_obj <- f_fourier_smooth(time_subset=c(1:600), df, node_subset=c(1:32), k=32)
result_obj <- f_fourier_smooth(time_subset=c(1:600), df, node_subset=c(1), k=32)
### fPCA
result_obj <- f_fourier_smooth(time_subset=c(1:600), df, node_subset=c(1), k=32)
### fPCA
result_obj <- f_fourier_smooth(time_subset=c(1:600), df, node_subset=c(2), k=32)
### fPCA
result_obj <- f_fourier_smooth(time_subset=c(1:600), df, node_subset=c(1), k=32)
View(data_mat)
View(df)
### fPCA
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
smoothed_curve
smooth.spline(smoothed_curve, dist, df = 6.4)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==5)
View(tmp)
smooth.spline(tmp, x=time,y=y_value df = 6.4)
smooth.spline(tmp, x=time,y=y_value,df = 6.4)
smooth.spline(x=time,y=y_value,tmp, df = 6.4)
smooth.spline(x=tmp$time,y=tmp$y_value,tmp, df = 6.4)
smooth.spline(x=tmp$time,y=tmp$y_value, df = 6.4)
smooth.spline(x=tmp$time,y=tmp$y_value)
predict(spl.fit, tmp$time)
spl.fit = smooth.spline(x=tmp$time,y=tmp$y_value)
predict(spl.fit, tmp$time)
plot(tmp$time,tmp$y_value, main = "data(cars)  &  smoothing splines")
plot(tmp$time, tmp$y_value)
lines(predict(spl.fit, tmp$time), col = 2)
View(df)
min(df$time)
min(df$time>0)
df$time>0
df[df$time>0]
subset(df, df$time>0)
subset(df, df$time<0)
subset(df, df$time<0)$time
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==5)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
help(zoo)
View(tmp)
##
zc <- zoo(tmp$y_value, tmp$time)
View(zc)
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(2), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==5)
tmp$node=2
View(tmp)
zs <- zoo(tmp$y_value, tmp$time)
z <- merge(zs,zc)
z
View(z)
z <- merge(zc,zs)
z <- merge(zc,zs,zs)
##
z <- zoo()
z
z <- merge(z, zc)
df
View(df)
##
#### scale by interpolation
tmp = subset(df, cycle==1)
View(tmp)
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
View(df)
##
#### scale by interpolation
tmp = subset(df, node==1)
##
#### scale by interpolation
z1 = subset(df, node==1)
z1 <- zoo(z1$y_value, z1$time)
View(z1)
z1 = subset(df, node==1)
z1 <- zoo(z1$y_value, z1$time)
z2 = subset(df, node==2)
z2 <- zoo(z2$y_value, z2$time)
z3 = subset(df, node==3)
z3 <- zoo(z3$y_value, z3$time)
z4 = subset(df, node==4)
z4 <- zoo(z4$y_value, z4$time)
z <- merge(z1, z2, z3, z4)
View(z)
plot(z)
View(z)
na.approx(z, rule=2)
tmp
View(tmp)
sin(1:9)
View(df)
View(tmp)
View(z)
na.approx(z)
na.approx(z,rule=2)
plot(z)
a=na.approx(z,rule=2)
plot(a)
ehlp(zoo)
help(zoo)
plot(z)
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(1), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node1 = transform.Cycle(smoothed_curve, register=0)
ggplot(transformed_node1, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
transformed_node1 = transform.Cycle(smoothed_curve, register=1)
ggplot(transformed_node1, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
ggplot(transformed_node1, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="top")
View(df)
subset(df, df$node=1)
subset(df, node==4)
subset(df, node==3)
subset(df, node==2)
help(resample)
print(i)
for(i in 1:32){
print(i)
}
df_1 = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
tmp=subset(df, node==i)
tmp$time=scale(tmp$time)
df_1=rbind(df_1,tmp)
}
View(df-1)
View(df_1)
ggplot(df_1, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
help(scale)
help(resample)
install.packages("resample")
library(resample)
help("resample")
df_1 = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
tmp=subset(df, node==i)
tmp_1=subset(tmp, time<=0)
tmp_2=subset(tmp, time>0)
tmp_1$time=scale(tmp_1$time)
tmp_2$time=scale(tmp_2$time)
df_1=rbind(df_1,tmp)
}
df_1
View(df_1)
max(1)
df_1 = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
tmp=subset(df, node==i)
tmp_1=subset(tmp, time<=0)
tmp_2=subset(tmp, time>0)
tmp_1$time=(tmp_1$time) / (max(abs(tmp_1)))
tmp_2$time=(tmp_2$time) / (max(abs(tmp_2)))
df_1=rbind(df_1,tmp)
}
View(df_1)
df_1 = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
tmp=subset(df, node==i)
tmp_1=subset(tmp, time<=0)
tmp_2=subset(tmp, time>0)
tmp_1$time=(tmp_1$time) / (max(abs(tmp_1)))
tmp_2$time=(tmp_2$time) / (max(abs(tmp_2)))
tmp=rbind(df_1,tmp_2)
df_1=rbind(df_1,tmp)
}
View(df_1)
tmp
View(df_1)
df_1 = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
tmp=subset(df, node==i)
tmp_1=subset(tmp, time<=0)
tmp_2=subset(tmp, time>0)
tmp_1$time=(tmp_1$time) / (max(abs(tmp_1$time)))
tmp_2$time=(tmp_2$time) / (max(abs(tmp_2$time)))
tmp=rbind(df_1,tmp_2)
df_1=rbind(df_1,tmp)
}
View(df_1)
tmp_1
View(df_1)
View(df_1)
library(zoo)
library(fda.usc)
library(dplyr)
library(reshape)
library(pracma)
library(ggplot2)
#data_15may2020 <- read.csv("C:/Users/Han Wang/Desktop/BioRankings/data_15may2020.csv", header=TRUE)
data_15may2020 <- read.csv("/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/data_15may2020.csv", header=TRUE)
z <- read.zoo(data_15may2020)
data_15may2020 <- select(data_15may2020, -c(X))
data_mat <- as.matrix(data_15may2020)
f_fourier_smooth <- function(time_subset, data_mat, node_subset, k){
basis <- create.fourier.basis(c(time_subset[1],time_subset[length(time_subset)]), k)
fd_obj <- smooth.basis(time_subset, data_mat[time_subset,node_subset], basis)
smoothfd <- fd_obj$fd
plot(smoothfd)
title(main=paste("Fourier Basis Smoothing of node:", node_subset, ", Basis_number:",k ))
return(fd_obj)
}
transform.Cycle = function(data, register){
# obtain index at which curve crosses 0
#crossed 0---> -1: pos to neg,    1: neg to pos
#returns: location index where curve crosses X-axis
x=diff(ifelse(data>0,1,0))
z_idx=(1:599)[x!=0]
# skip first crossing if it is from positive to negative
if (x[z_idx[1]]==-1){
z_idx=z_idx[-1]
}
#put every complete cycle in a Dataframe
i=1
cl=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i+2<=length(z_idx)){
if(register==0){
tmp=data.frame(cycle=cl, time=seq(z_idx[i],z_idx[i+2]), y_value=smoothed_curve[z_idx[i]:z_idx[i+2]])
}
else{
tmp=data.frame(cycle=cl, time=seq(1,length(seq(z_idx[i],z_idx[i+2]))), y_value=smoothed_curve[z_idx[i]:z_idx[i+2]])
tmp[,2]=tmp[,2]-length(seq(z_idx[i],z_idx[i+1]))-1
}
result=rbind(result,tmp)
i=i+2
cl=cl+1
}
return(result)
}
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
ggplot(df, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
rbind(df_1,tmp)
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
df = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(i), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
tmp = subset(transformed_node, cycle==1)
tmp$node=i
df=rbind(df,tmp)
}
View(df)
df_new = data.frame(node=integer(),cycle=integer(), time=integer(), y_value=integer())
for(i in 1:32){
tmp=subset(df, node==i)
tmp_1=subset(tmp, time<=0)
tmp_2=subset(tmp, time>0)
tmp_1$time=(tmp_1$time) / (max(abs(tmp_1$time)))
tmp_2$time=(tmp_2$time) / (max(abs(tmp_2$time)))
tmp=rbind(tmp_1,tmp_2)
df_new=rbind(df_new,tmp)
}
View(df_new)
ggplot(df_new, aes(time, y_value,group=node, colour=node)) + geom_line() + theme(legend.position="top")
1961/32
