basis <- create.fourier.basis(c(time_subset[1],time_subset[length(time_subset)]), k)
fd_obj <- smooth.basis(time_subset, data_mat[time_subset,node_subset], basis)
smoothfd <- fd_obj$fd
#plot(smoothfd)
#title(main=paste("Fourier Basis Smoothing of node:", node_subset, ", Basis_number:",k ))
return(fd_obj)
}
```
### 1.4. function 4: *fPCA.nodes*
```{r, include=FALSE}
## function 4
# FPCA function
fPCA.nodes <- function(data_mat, k, nharm, plt){
smoothfd <- fourier_smooth(data_mat, time_subset=c(1:nrow(data_mat)),
node_subset=c(1:ncol(data_mat)), k)$fd
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
if(plt==1){
plot.pca.fd(rotpcalist)
}
return(rotpcalist)
}
```
### 1.5. function 5: *node.scaler*
```{r, include=FALSE}
## function 5
# Scale the node timeframe to [-1,1] and make make sure each cycle has same number of rows
node.scaler <-  function(data_mat, node, k=32){
result_obj <- fourier_smooth(data_mat, time_subset=c(1:nrow(data_mat)),
node_subset=c(node), k)
smoothed_curve = eval.fd(c(1:nrow(data_mat)),result_obj$fd)
transformed_node = Wave(smoothed_curve, register=1)
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time = ifelse(tmp$time<=0, (tmp$time)/abs(min(tmp$time)),
(tmp$time)/abs(max(tmp$time)))
df_tmp=rbind(df_tmp,tmp)
}
par(mfrow=c(1,1))
return(df_tmp)
}
```
### 1.6. function 6: *row.check*
```{r, include=FALSE}
## function 6
# make sure they have same row number
row.check <- function(node_data) {
node_df = data.frame(matrix(nrow=80))
node.name = unique(node_data$cycle)
for(i in 1:length(unique(node_data$cycle))){
xx=seq(-1,1,length.out=80)
tmp=subset(node_data, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
node_df[,ncol(node_df)+1]=predict(s,xx)$y
}
node_df=node_df[,2:(length(unique(node_data$cycle))+1)]
#node_df <- as.matrix(node_df)
names(node_df) = node.name
return(node_df)
}
```
### 1.7 function *pc.df*
it's to put variance on 1st and 2nd Principle Components into dataframe. It is the same.
```{r, include=FALSE}
pc.df <- function(patient_df){
PC1_df = data.frame(matrix(nrow=80))
PC2_df = data.frame(matrix(nrow=80))
mean_df = data.frame(matrix(nrow=80))
out = list()
for(node in 1:ncol(patient_df)){
node.df = node.scaler(patient_df, node, k=21)
node.df = as.matrix(row.check(node.df))
rotpcalist = fPCA.nodes(data_mat=node.df, k=11, nharm=2, plt=0)
# PC1 & PC2
harmfd <- rotpcalist[[1]]
basisfd <- harmfd$basis
rangex <- basisfd$rangeval
x <- seq(rangex[1], rangex[2], length = harmfd$basis$rangeval[2])
meanmat <- eval.fd(x, rotpcalist$meanfd)
fdmat <- eval.fd(x, harmfd)
fac1 <- sqrt(rotpcalist$values[1])
fac2 <- sqrt(rotpcalist$values[2])
PC1_df[,ncol(PC1_df)+1]=2*fac1*fdmat[,1]
PC2_df[,ncol(PC2_df)+1]=2*fac2*fdmat[,2]
mean_df[,ncol(mean_df)+1]=meanmat
}
PC1_df = data.frame(PC1_df[,2:(ncol(PC1_df))])
names(PC1_df)=colnames(patient_df)
PC2_df = data.frame(PC2_df[,2:(ncol(PC2_df))])
names(PC2_df)=colnames(patient_df)
mean_df = data.frame(mean_df[,2:(ncol(mean_df))])
names(mean_df)=colnames(patient_df)
out$pc1 = PC1_df
out$pc2 = PC2_df
out$mean = mean_df
return(out)
}
```
##########################################
node1 = Wave(patient18[,3], register=0)
ggplot(node1, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="right")+ggtitle("Patient 1, Node 1")
node1 = Wave(patient18[,3], register=1)
ggplot(node1, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="right")+ggtitle("Patient 1, Node 1")
View(node1)
node1[1,2]
nrow(node1)
node1[639,]=c(1,2,3)
View(node1)
node1[nrow(node1)+1,]=c(1,2,3)
node1[nrow(node1)+1,]=c(1,node1[nrow(node1),2],3)
View(node1)
Wave = function(node_data, register){
# obtain index at which curve crosses 0
#crossed 0---> -1: pos to neg,    1: neg to pos
#returns: location index where curve crosses X-axis
x=diff(ifelse(node_data>0,1,0))
z_idx=(1:length(node_data))[x!=0]
# skip first crossing if it is from positive to negative
if (x[z_idx[1]]==-1){
z_idx=z_idx[-1]
}
#put every complete cycle in a Dataframe
i=1
cl=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i+2<=length(z_idx)){
if(register==0){
tmp=data.frame(cycle=cl, time=seq(z_idx[i],z_idx[i+2]), y_value=node_data[z_idx[i]:z_idx[i+2]])
}
else{
tmp=data.frame(cycle=cl, time=seq(1,length(seq(z_idx[i],z_idx[i+2]))), y_value=node_data[z_idx[i]:z_idx[i+2]])
tmp[,2]=tmp[,2]-length(seq(z_idx[i],z_idx[i+1]))-1
}
### fixme: start start 0 issue
tmp[1,3]=0
tmp[nrow(tmp)+1,] = c(cl, tmp[nrow(tmp),2], 0)
###
result=rbind(result,tmp)
i=i+2
cl=cl+1
}
return(result)
}
node1 = Wave(patient18[,3], register=1)
ggplot(node1, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="right")+ggtitle("Patient 1, Node 1")
View(node1)
Wave = function(node_data, register){
# obtain index at which curve crosses 0
#crossed 0---> -1: pos to neg,    1: neg to pos
#returns: location index where curve crosses X-axis
x=diff(ifelse(node_data>0,1,0))
z_idx=(1:length(node_data))[x!=0]
# skip first crossing if it is from positive to negative
if (x[z_idx[1]]==-1){
z_idx=z_idx[-1]
}
#put every complete cycle in a Dataframe
i=1
cl=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i+2<=length(z_idx)){
if(register==0){
tmp=data.frame(cycle=cl, time=seq(z_idx[i],z_idx[i+2]), y_value=node_data[z_idx[i]:z_idx[i+2]])
}
else{
tmp=data.frame(cycle=cl, time=seq(1,length(seq(z_idx[i],z_idx[i+2]))), y_value=node_data[z_idx[i]:z_idx[i+2]])
tmp[,2]=tmp[,2]-length(seq(z_idx[i],z_idx[i+1]))-1
}
### fixme: start start 0 issue
tmp[1,3]=0
tmp[nrow(tmp)+1,] = c(cl, tmp[nrow(tmp),2]+1, 0)
###
result=rbind(result,tmp)
i=i+2
cl=cl+1
}
return(result)
}
node1 = Wave(patient8[,3], register=1)
node1 = Wave(patient18[,3], register=1)
ggplot(node1, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="right")+ggtitle("Patient 1, Node 1")
library(zoo)
library(fda.usc)
library(dplyr)
library(reshape)
library(reshape2)
library(pracma)
library(ggplot2)
## function 1:
# function to read data from specified file location, with respect to Node and Time of interest
ReadFile <- function(file_loc, time_subset, node_subset){
data_mat <- read.csv(file_loc, header=TRUE)
#data_mat <- select(data_mat, -c(X)) # input data åhas an extra column "X"
return(as.matrix(data_mat[time_subset,node_subset]))
}
tmp1 = Wave(tmp[,node_number], register=0)
pd_placebo
#         **main  script**              #
##########################################
## 1. Function Implementations
### 1.1 function 1: *ReadFile* and attach packages
```{r setup, include=FALSE}
library(zoo)
library(fda.usc)
library(dplyr)
library(reshape)
library(reshape2)
library(pracma)
library(ggplot2)
## function 1:
# function to read data from specified file location, with respect to Node and Time of interest
ReadFile <- function(file_loc, time_subset, node_subset){
data_mat <- read.csv(file_loc, header=TRUE)
#data_mat <- select(data_mat, -c(X)) # input data åhas an extra column "X"
return(as.matrix(data_mat[time_subset,node_subset]))
}
```
### 1.2. function 2: *Wave*
```{r, include=FALSE}
## function 2:
# extract each complete periodic cycle, one node (600x1) at a time
Wave = function(node_data, register){
# obtain index at which curve crosses 0
#crossed 0---> -1: pos to neg,    1: neg to pos
#returns: location index where curve crosses X-axis
x=diff(ifelse(node_data>0,1,0))
z_idx=(1:length(node_data))[x!=0]
# skip first crossing if it is from positive to negative
if (x[z_idx[1]]==-1){
z_idx=z_idx[-1]
}
#put every complete cycle in a Dataframe
i=1
cl=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i+2<=length(z_idx)){
if(register==0){
tmp=data.frame(cycle=cl, time=seq(z_idx[i],z_idx[i+2]), y_value=node_data[z_idx[i]:z_idx[i+2]])
}
else{
tmp=data.frame(cycle=cl, time=seq(1,length(seq(z_idx[i],z_idx[i+2]))), y_value=node_data[z_idx[i]:z_idx[i+2]])
tmp[,2]=tmp[,2]-length(seq(z_idx[i],z_idx[i+1]))-1
}
# fixed: start & end at 0 issue
tmp[1,3]=0
tmp[nrow(tmp)+1,] = c(cl, tmp[nrow(tmp),2]+1, 0)
result=rbind(result,tmp)
i=i+2
cl=cl+1
}
return(result)
}
```
### 1.3. function 3: *fourier_smooth*
```{r, include=FALSE}
## function 3:
# Defined fourier smoothing functions
# To study a single brain node response, specify the node number in the *node_subset* list.
fourier_smooth <- function(data_mat, time_subset, node_subset, k){
basis <- create.fourier.basis(c(time_subset[1],time_subset[length(time_subset)]), k)
fd_obj <- smooth.basis(time_subset, data_mat[time_subset,node_subset], basis)
smoothfd <- fd_obj$fd
#plot(smoothfd)
#title(main=paste("Fourier Basis Smoothing of node:", node_subset, ", Basis_number:",k ))
return(fd_obj)
}
```
### 1.4. function 4: *fPCA.nodes*
```{r, include=FALSE}
## function 4
# FPCA function
fPCA.nodes <- function(data_mat, k, nharm, plt){
smoothfd <- fourier_smooth(data_mat, time_subset=c(1:nrow(data_mat)),
node_subset=c(1:ncol(data_mat)), k)$fd
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
if(plt==1){
plot.pca.fd(rotpcalist)
}
return(rotpcalist)
}
```
### 1.5. function 5: *node.scaler*
```{r, include=FALSE}
## function 5
# Scale the node timeframe to [-1,1] and make make sure each cycle has same number of rows
node.scaler <-  function(data_mat, node, k=32){
result_obj <- fourier_smooth(data_mat, time_subset=c(1:nrow(data_mat)),
node_subset=c(node), k)
smoothed_curve = eval.fd(c(1:nrow(data_mat)),result_obj$fd)
transformed_node = Wave(smoothed_curve, register=1)
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time = ifelse(tmp$time<=0, (tmp$time)/abs(min(tmp$time)),
(tmp$time)/abs(max(tmp$time)))
df_tmp=rbind(df_tmp,tmp)
}
par(mfrow=c(1,1))
return(df_tmp)
}
```
### 1.6. function 6: *row.check*
```{r, include=FALSE}
## function 6
# make sure they have same row number
row.check <- function(node_data) {
node_df = data.frame(matrix(nrow=80))
node.name = unique(node_data$cycle)
for(i in 1:length(unique(node_data$cycle))){
xx=seq(-1,1,length.out=80)
tmp=subset(node_data, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
node_df[,ncol(node_df)+1]=predict(s,xx)$y
}
node_df=node_df[,2:(length(unique(node_data$cycle))+1)]
#node_df <- as.matrix(node_df)
names(node_df) = node.name
return(node_df)
}
```
### 1.7 function *pc.df*
it's to put variance on 1st and 2nd Principle Components into dataframe. It is the same.
```{r, include=FALSE}
pc.df <- function(patient_df){
PC1_df = data.frame(matrix(nrow=80))
PC2_df = data.frame(matrix(nrow=80))
mean_df = data.frame(matrix(nrow=80))
out = list()
for(node in 1:ncol(patient_df)){
node.df = node.scaler(patient_df, node, k=21)
node.df = as.matrix(row.check(node.df))
rotpcalist = fPCA.nodes(data_mat=node.df, k=11, nharm=2, plt=0)
# PC1 & PC2
harmfd <- rotpcalist[[1]]
basisfd <- harmfd$basis
rangex <- basisfd$rangeval
x <- seq(rangex[1], rangex[2], length = harmfd$basis$rangeval[2])
meanmat <- eval.fd(x, rotpcalist$meanfd)
fdmat <- eval.fd(x, harmfd)
fac1 <- sqrt(rotpcalist$values[1])
fac2 <- sqrt(rotpcalist$values[2])
PC1_df[,ncol(PC1_df)+1]=2*fac1*fdmat[,1]
PC2_df[,ncol(PC2_df)+1]=2*fac2*fdmat[,2]
mean_df[,ncol(mean_df)+1]=meanmat
}
PC1_df = data.frame(PC1_df[,2:(ncol(PC1_df))])
names(PC1_df)=colnames(patient_df)
PC2_df = data.frame(PC2_df[,2:(ncol(PC2_df))])
names(PC2_df)=colnames(patient_df)
mean_df = data.frame(mean_df[,2:(ncol(mean_df))])
names(mean_df)=colnames(patient_df)
out$pc1 = PC1_df
out$pc2 = PC2_df
out$mean = mean_df
return(out)
}
```
##########################################
### 1.8 function *nodes.compare*
```{r, include=FALSE}
nodes.compare <- function(patient_list, node_number){
nodes_df = data.frame(matrix(nrow=600))
for (i in patient_list){
tmp = ReadFile(paste('/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/Data for Zach/Data for Zach ', i,'.csv', sep=""))
tmp1 = Wave(tmp[,node_number], register=0)
nodes_df[,ncol(nodes_df)+1]=spline(index(tmp1), tmp1$y_value, n = 600, method = "natural")$y
}
nodes_df=nodes_df[,2:length(nodes_df)]
names(nodes_df)=paste('patient', pd_placebo, sep = "")
nodes_df$index = c(1:600)
return(nodes_df)
}
```
nodes.compare(pd_placebo, node_number=1)
tmp=nodes.compare(pd_placebo, node_number=i)
View(tmp)
Wave(tmp)
Wave(tmp, register=0)
Wave(tmp[,1], register=0)
tmp = Wave(tmp[,1], register=0)
View(tmp1)
View(tmp)
print(ggplot(d, aes(x = time, y = value)) +
geom_line(aes(color = cycle, linetype = cycl)) + ggtitle(paste("PD-placebo, Node,",i)))
print(ggplot(d, aes(x = time, y = value)) +
geom_line(aes(color = cycle, linetype = cycle)) + ggtitle(paste("PD-placebo, Node,",i)))
print(ggplot(tmp, aes(x = time, y = value)) +
geom_line(aes(color = cycle, linetype = cycle)) + ggtitle(paste("PD-placebo, Node,",i)))
print(ggplot(tmp, aes(x = time, y = y_value)) +
geom_line(aes(color = cycle, linetype = cycle)) + ggtitle(paste("PD-placebo, Node,",i)))
as.matrix(tmp)
print(ggplot(as.matrix(tmp), aes(x = time, y = y_value)) +
geom_line(aes(color = cycle, linetype = cycle)) + ggtitle(paste("PD-placebo, Node,",i)))
ggplot(as.matrix(tmp), aes(x = time, y = y_value)) +
geom_line(aes(color = cycle, linetype = cycle)) + ggtitle(paste("PD-placebo, Node,",i))
node1 = Wave(patient18[,3], register=0)
ggplot(node1, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="right")+ggtitle("Patient 1, Node 1")
node1 = Wave(patient18[,3], register=1)
ggplot(node1, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="right")+ggtitle("Patient 1, Node 1")
library(zoo)
library(fda.usc)
library(dplyr)
library(reshape)
library(reshape2)
library(pracma)
library(ggplot2)
## function 1:
# function to read data from specified file location, with respect to Node and Time of interest
ReadFile <- function(file_loc, time_subset, node_subset){
data_mat <- read.csv(file_loc, header=TRUE)
#data_mat <- select(data_mat, -c(X)) # input data åhas an extra column "X"
return(as.matrix(data_mat[time_subset,node_subset]))
}
### put node 1 from PD-placebo group together
node1=nodes.compare(pd_placebo, node_number=i)
node1
node1 = Wave(node1[,3], register=1)
ggplot(node1, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="right")+ggtitle("Patient 1, Node 1")
node1 = Wave(node1[,3], register=0)
ggplot(node1, aes(time, y_value,group=cycle, colour=cycle)) + geom_line() + theme(legend.position="right")+ggtitle("Patient 1, Node 1")
z <- read.csv(file_loc25, header=TRUE)
# plot original time series of one patient
i=25
z<-ReadFile(paste('/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/Data for Zach/Data for Zach ', i,'.csv', sep=""),
time_subset=c(1:600), node_subset=c(1,2,3,8,11,31))
z <- read.zoo(z[1:600,])
#z <- read.zoo(z[1:600,])
autoplot(z, facet = NULL, main='Patient 80')
View(z)
z <- read.zoo(z[1:600,])
#z <- read.zoo(z[1:600,])
autoplot(as.matrix(z), facet = NULL, main='Patient 80')
# plot patient data
a = patient25
d <- melt(data = a, id.vars = c("index"), measure.vars = colnames(patient1))
print(ggplot(d, aes(x = Var1, y = value)) +
geom_line(aes(color = Var2))+ggtitle(paste("patient", 10)))
# plot original time series of one patient
i=25
patient25<-ReadFile(paste('/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/Data for Zach/Data for Zach ', i,'.csv', sep=""),
time_subset=c(1:600), node_subset=c(1,2,3,8,11,31))
# plot original time series of one patient
i=100
patient25<-ReadFile(paste('/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/Data for Zach/Data for Zach ', i,'.csv', sep=""),
time_subset=c(1:600), node_subset=c(1,2,3,8,11,31))
# plot patient data
a = patient25
i = 10
d <- melt(data = a, id.vars = c("index"), measure.vars = colnames(patient1))
print(ggplot(d, aes(x = Var1, y = value)) +
geom_line(aes(color = Var2))+ggtitle(paste("patient", 10)))
# plot original time series of one patient
i=100
df<-ReadFile(paste('/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/Data for Zach/Data for Zach ', i,'.csv', sep=""),
time_subset=c(1:600), node_subset=c(1,2,3,8,11,31))
# plot patient data
d <- melt(data = df, id.vars = c("index"), measure.vars = colnames(patient1))
print(ggplot(d, aes(x = Var1, y = value)) +
geom_line(aes(color = Var2))+ggtitle(paste("patient", 10)))
print(ggplot(d, aes(x = Var1, y = value)) +
geom_line(aes(color = Var2))+ggtitle(paste("patient", i)))
# plot original time series of one patient
i=10
df<-ReadFile(paste('/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/Data for Zach/Data for Zach ', i,'.csv', sep=""),
time_subset=c(1:600), node_subset=c(1,2,3,8,11,31))
# plot patient data
d <- melt(data = df, id.vars = c("index"), measure.vars = colnames(patient1))
print(ggplot(d, aes(x = Var1, y = value)) +
geom_line(aes(color = Var2))+ggtitle(paste("patient", i)))
i=56
df<-ReadFile(paste('/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/Data for Zach/Data for Zach ', i,'.csv', sep=""),
time_subset=c(1:600), node_subset=c(1,2,3,8,11,31))
# plot patient data
d <- melt(data = df, id.vars = c("index"), measure.vars = colnames(patient1))
print(ggplot(d, aes(x = Var1, y = value)) +
geom_line(aes(color = Var2))+ggtitle(paste("patient", i)))
# plot original time series of one patient
i=23
df<-ReadFile(paste('/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/Data for Zach/Data for Zach ', i,'.csv', sep=""),
time_subset=c(1:600), node_subset=c(1,2,3,8,11,31))
# plot patient data
d <- melt(data = df, id.vars = c("index"), measure.vars = colnames(patient1))
print(ggplot(d, aes(x = Var1, y = value)) +
geom_line(aes(color = Var2))+ggtitle(paste("patient", i)))
print(ggplot(d, aes(x = Var1, y = value)) +
geom_line(aes(linetype=Var2,color = Var2,))+ggtitle(paste("patient", i)))
# plot original time series of one patient
i=51
df<-ReadFile(paste('/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/Data for Zach/Data for Zach ', i,'.csv', sep=""),
time_subset=c(1:600), node_subset=c(1,2,3,8,11,31))
# plot patient data
d <- melt(data = df, id.vars = c("index"), measure.vars = colnames(patient1))
print(ggplot(d, aes(x = Var1, y = value)) +
geom_line(aes(linetype=Var2,color = Var2,))+ggtitle(paste("patient", i)))
i=56
df<-ReadFile(paste('/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/Data for Zach/Data for Zach ', i,'.csv', sep=""),
time_subset=c(1:600), node_subset=c(1,2,3,8,11,31))
# plot patient data
d <- melt(data = df, id.vars = c("index"), measure.vars = colnames(patient1))
print(ggplot(d, aes(x = Var1, y = value)) +
geom_line(aes(linetype=Var2,color = Var2,))+ggtitle(paste("patient", i)))
i=100
df<-ReadFile(paste('/Users/hanwang/desktop/Git_desktop/Functional_Data_Analysis/Data for Zach/Data for Zach ', i,'.csv', sep=""),
time_subset=c(1:600), node_subset=c(1,2,3,8,11,31))
# plot patient data
d <- melt(data = df, id.vars = c("index"), measure.vars = colnames(patient1))
print(ggplot(d, aes(x = Var1, y = value)) +
geom_line(aes(linetype=Var2,color = Var2,))+ggtitle(paste("patient", i)))
