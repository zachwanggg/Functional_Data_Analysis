par(mfrow=c(nharm,1))
if(plt==1){
plot.pca.fd(rotpcalist)
}
return(rotpcalist)
}
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=11, nharm=2, plt=0)
PCA_df <- data.frame(matrix(nrow=rotpcalist$harmonics$basis$rangeval[2]))
# Calculation for Harmonics/eigenvectors
for(x in (rotpcalist$harmonics$basis$rangeval[1]:rotpcalist$harmonics$basis$rangeval[2])){
PC1_coef = rotpcalist$harmonics$coefs[,1]
PC2_coef = rotpcalist$harmonics$coefs[,2]
flag = ifelse(index(PC1_coef)%%2==0, 1, 0)
even_idx = (1:length(PC1_coef))[flag==1]
odd_idx = (1:length(PC1_coef))[flag==0][-1]
PCA_df[x, 1] = PC1_coef[1] + sin(x)*sum(PC1_coef[even_idx]) + cos(x)*sum(PC1_coef[odd_idx]) # fixme
PCA_df[x, 2] = PC2_coef[1] + sin(x)*sum(PC2_coef[even_idx]) + cos(x)*sum(PC2_coef[odd_idx]) # fixme
## calculation trial 2
#PCA_df[x, 1] = PC1_coef[1]
#PCA_df[x, 2] = PC2_coef[1]
#t=1
#for(i in 1:length((even_idx))){
#  PCA_df[x, 1]=PCA_df[x, 1]+sin(t*x*PC1_coef[even_idx[i]])
#  PCA_df[x, 2]=PCA_df[x, 2]+sin(t*x*PC2_coef[even_idx[i]])
#  t=t+1
#}
#t=1
#for(j in 1:length((odd_idx))){
#  PCA_df[x, 1]=PCA_df[x, 1]+sin(t*x*PC1_coef[odd_idx[j]])
#  PCA_df[x, 2]=PCA_df[x, 2]+sin(t*x*PC2_coef[odd_idx[j]])
#  t=t+1
#}
}
print(paste('ncol', ncol(PC1_df)))
PC1_df[,ncol(PC1_df)+1]=PCA_df[,1]
PC2_df[,ncol(PC2_df)+1]=PCA_df[,2]
}
f_fourier_smooth <- function(time_subset, data_mat, node_subset, k){
basis <- create.fourier.basis(c(time_subset[1],time_subset[length(time_subset)]), k)
fd_obj <- smooth.basis(time_subset, data_mat[time_subset,node_subset], basis)
smoothfd <- fd_obj$fd
#plot(smoothfd)
#title(main=paste("Fourier Basis Smoothing of node:", node_subset, ", Basis_number:",k ))
return(fd_obj)
}
transform.Cycle = function(data, register){
# obtain index at which curve crosses 0
#crossed 0---> -1: pos to neg,    1: neg to pos
#returns: location index where curve crosses X-axis
x=diff(ifelse(data>0,1,0))
z_idx=(1:599)[x!=0]
# skip first crossing if it is from positive to negative
if (x[z_idx[1]]==-1){
z_idx=z_idx[-1]
}
#put every complete cycle in a Dataframe
i=1
cl=1
result=data.frame(cycle=integer(), time=integer(), y_value=integer())
while (i+2<=length(z_idx)){
if(register==0){
tmp=data.frame(cycle=cl, time=seq(z_idx[i],z_idx[i+2]),
y_value=smoothed_curve[z_idx[i]:z_idx[i+2]])
}
else{
tmp=data.frame(cycle=cl, time=seq(1,length(seq(z_idx[i],z_idx[i+2]))),
y_value=smoothed_curve[z_idx[i]:z_idx[i+2]])
}
result=rbind(result,tmp)
i=i+2
cl=cl+1
}
return(result)
}
page(plot.pca.fd())
page(plot.pca.fd
)
for(node in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(node), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
df_new = data.frame(matrix(nrow=80))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=80)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
for(node in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(node), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
df_new = data.frame(matrix(nrow=80))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=80)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
## FPCA now
fPCA_subset <- function(data_mat, k, nharm, plt){
basis <- create.fourier.basis(c(1,nrow(data_mat)), k)
smoothfd <- smooth.basis(1:nrow(data_mat), data_mat, basis)$fd
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
if(plt==1){
plot.pca.fd(rotpcalist)
}
return(rotpcalist)
}
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=11, nharm=2, plt=0)
par(mfrow=c(1,1))
plot(rotpcalist$harmonics)
title(paste("node",node))
}
## FPCA now
fPCA_subset <- function(data_mat, k, nharm, plt){
basis <- create.fourier.basis(c(1,nrow(data_mat)), k)
smoothfd <- smooth.basis(1:nrow(data_mat), data_mat, basis)$fd
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
if(plt==1){
plot.pca.fd(rotpcalist)
}
return(rotpcalist)
}
for(node in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(node), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
df_new = data.frame(matrix(nrow=80))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=80)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=11, nharm=2, plt=0)
par(mfrow=c(1,1))
plot(rotpcalist$harmonics)
title(paste("node",node))
}
#plot(rotpcalist$harmonics)
title(paste("node",node))
for(node in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(node), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
df_new = data.frame(matrix(nrow=80))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=80)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=11, nharm=2, plt=0)
par(mfrow=c(1,1))
#plot(rotpcalist$harmonics)
title(paste("node",node))
}
## FPCA now
fPCA_subset <- function(data_mat, k, nharm, plt){
basis <- create.fourier.basis(c(1,nrow(data_mat)), k)
smoothfd <- smooth.basis(1:nrow(data_mat), data_mat, basis)$fd
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
if(plt==1){
plot.pca.fd(rotpcalist)
}
return(rotpcalist)
}
# 32 nodes
for(node in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(node), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
df_new = data.frame(matrix(nrow=80))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=80)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=11, nharm=2, plt=0)
#par(mfrow=c(1,1))
#plot(rotpcalist$harmonics)
#title(paste("node",node))
}
## FPCA now
fPCA_subset <- function(data_mat, k, nharm, plt){
basis <- create.fourier.basis(c(1,nrow(data_mat)), k)
smoothfd <- smooth.basis(1:nrow(data_mat), data_mat, basis)$fd
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
if(plt==1){
plot.pca.fd(rotpcalist)
}
return(rotpcalist)
}
# 32 nodes
for(node in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(node), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
df_new = data.frame(matrix(nrow=80))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=80)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=11, nharm=2, plt=1)
#par(mfrow=c(1,1))
#plot(rotpcalist$harmonics)
#title(paste("node",node))
}
edit(plot.pca.fd)
edit(plot.pca.fd)
rotpcalist
rotpcalist[1]
rotpcalist[[1]]
rotpcalist[[1]]
rotpcalist[[2]]
rotpcalist[[1]]
View(rotpcalist)
edit(plot.pca.fd)
harmfd=rotpcalist[[1]]
fdmat <- eval.fd(rotpcalist, harmfd)
page(plot.pca.fd())
page(plot.pca.fd
)
rotpcalist[[1]]
harmfd = rotpcalist[[1]]
basisfd <- harmfd$basis
rangex <- basisfd$rangeval
eval.fd(x, harmfd)
eval.fd(rotpcalist, harmfd)
pcafd <- rotpcalist
if (!(inherits(pcafd, "pca.fd")))
stop("Argument 'x' is not a pca.fd object.")
harmfd <- pcafd[[1]]
basisfd <- harmfd$basis
rangex <- basisfd$rangeval
{
if (length(nx) > 1) {
x <- nx
nx <- length(x)
}
else x <- seq(rangex[1], rangex[2], length = nx)
}
harmfd <- pcafd[[1]]
basisfd <- harmfd$basis
rangex <- basisfd$rangeval
eval.fd(x, harmfd)
nx=128
View(rotpcalist)
type(rotpcalist)
Type(rotpcalist)
class(rotpcalist)
eval.fd(rotpcalist, harmfd)
length(128)
x <- seq(rangex[1], rangex[2], length = 128)
eval.fd(x, harmfd)
fdmat <- eval.fd(x, harmfd)
fdmat[1]
fdmat[,1]
plot(fdmat[,1])
plot(fdmat[,2])
edit(plot.pca.fd())
edit(plot.pca.fd
)
## FPCA now
fPCA_subset <- function(data_mat, k, nharm, plt){
basis <- create.fourier.basis(c(1,nrow(data_mat)), k)
smoothfd <- smooth.basis(1:nrow(data_mat), data_mat, basis)$fd
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
if(plt==1){
plot.pca.fd(rotpcalist)
}
return(rotpcalist)
}
# 32 nodes
for(node in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(node), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
df_new = data.frame(matrix(nrow=80))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=80)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=11, nharm=2, plt=1)
#par(mfrow=c(1,1))
#plot(rotpcalist$harmonics)
#title(paste("node",node))
}
## FPCA now
fPCA_subset <- function(data_mat, k, nharm, plt){
basis <- create.fourier.basis(c(1,nrow(data_mat)), k)
smoothfd <- smooth.basis(1:nrow(data_mat), data_mat, basis)$fd
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
if(plt==1){
plot.pca.fd(rotpcalist)
}
return(rotpcalist)
}
# 32 nodes
for(node in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(node), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
df_new = data.frame(matrix(nrow=80))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=80)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=11, nharm=2, plt=0)
#par(mfrow=c(1,1))
#plot(rotpcalist$harmonics)
#title(paste("node",node))
}
edit(plot.pca.fd)
rotpcalist
plot(rotpcalist)
edit(plot.pca.fd)
nx = 128
harmfd <- rotpcalist[[1]]
basisfd <- harmfd$basis
rangex <- basisfd$rangeval
x <- seq(rangex[1], rangex[2], length = nx)
fdmat <- eval.fd(x, harmfd)
meanmat <- eval.fd(x, pcafd$meanfd)
dim(fdmat)
nx = 80
harmfd <- rotpcalist[[1]]
basisfd <- harmfd$basis
rangex <- basisfd$rangeval
x <- seq(rangex[1], rangex[2], length = nx)
fdmat <- eval.fd(x, harmfd)
meanmat <- eval.fd(x, pcafd$meanfd)
edit(plot.pca.fd())
edit(plot.pca.fd
)
plot(x, fdmat[,1]
)
plot(x, fdmat[,2])
par(mfrow=c(2,2))
plot(rotpcalist)
plot(x, fdmat[,1])
plot(x, fdmat[,2])
edit(plot.pca.fd())
edit(plot.pca.fd)
rotpcalist$harmonics$basis$rangeval[2]
harmfd
harmfd$basis$rangeval[2]
fdmat
## FPCA now
fPCA_subset <- function(data_mat, k, nharm, plt){
basis <- create.fourier.basis(c(1,nrow(data_mat)), k)
smoothfd <- smooth.basis(1:nrow(data_mat), data_mat, basis)$fd
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
if(plt==1){
plot.pca.fd(rotpcalist)
}
return(rotpcalist)
}
## FPCA now
fPCA_subset <- function(data_mat, k, nharm, plt){
basis <- create.fourier.basis(c(1,nrow(data_mat)), k)
smoothfd <- smooth.basis(1:nrow(data_mat), data_mat, basis)$fd
pcalist = pca.fd(smoothfd, nharm, harmfdPar=fdPar(smoothfd))
rotpcalist = varmx.pca.fd(pcalist)
par(mfrow=c(nharm,1))
if(plt==1){
plot.pca.fd(rotpcalist)
}
return(rotpcalist)
}
## PC1 PC2
PC1_df = data.frame(matrix(nrow=80))
PC2_df = data.frame(matrix(nrow=80))
for(node in 1:32){
result_obj <- f_fourier_smooth(time_subset=c(1:600), data_mat, node_subset=c(node), k=32)
smoothed_curve = eval.fd(c(1:600),result_obj$fd)
transformed_node = transform.Cycle(smoothed_curve, register=1)
df_tmp = data.frame(cycle=integer(), time=integer(), y_value=integer())
for(i in 1:length(unique(transformed_node$cycle))){
tmp=subset(transformed_node, cycle==i)
tmp$time=(tmp$time)/max(tmp$time)
df_tmp=rbind(df_tmp,tmp)
}
df_new = data.frame(matrix(nrow=80))
for(i in 1:length(unique(df_tmp$cycle))){
xx=seq(0,1,length.out=80)
tmp=subset(df_tmp, cycle==i)
s=smooth.spline(x=tmp$time, y=tmp$y_value,  df = 10)
df_new[,ncol(df_new)+1]=predict(s,xx)$y
}
df_new=df_new[,2:(length(unique(df_tmp$cycle))+1)]
df_new <- as.matrix(df_new)
rotpcalist = fPCA_subset(df_new, k=11, nharm=2, plt=0)
PCA_df <- data.frame(matrix(nrow=rotpcalist$harmonics$basis$rangeval[2]))
# PC1 & PC2
harmfd <- rotpcalist[[1]]
basisfd <- harmfd$basis
rangex <- basisfd$rangeval
x <- seq(rangex[1], rangex[2], length = harmfd$basis$rangeval[2])
fdmat <- eval.fd(x, harmfd)
meanmat <- eval.fd(x, pcafd$meanfd)
print(paste('ncol', ncol(PC1_df)))
PC1_df[,ncol(PC1_df)+1]=fdmat[,1]
PC2_df[,ncol(PC2_df)+1]=fdmat[,2]
}
View(PC1_df)
PC1_df = data.frame(PC1_df[,2:(ncol(PC1_df))])
names(PC1_df)=colnames(data_mat)
PC2_df = data.frame(PC2_df[,2:(ncol(PC2_df))])
names(PC2_df)=colnames(data_mat)
z_1 = read.zoo(PC1_df, index='index')
z_2 = read.zoo(PC2_df, index='index')
autoplot(z_1, facet = NULL)
autoplot(z_2, facet = NULL
)
autoplot(z_1, facet = NULL)
View(df_new)
plot(df_new[,1])
plot(df_new[,2])
####
PC1_df
autoplot(z_1, facet = NULL, title('a'))
autoplot(z_1, facet = NULL, title('a'))
autoplot(z_1, facet = NULL, title='a')
autoplot(z_1, facet = NULL,xlab = "Time" , title='a')
autoplot(z_1,xlab = "Time" , title='a')
